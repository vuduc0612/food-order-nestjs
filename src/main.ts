import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { ValidationPipe } from '@nestjs/common';
import * as dotenv from 'dotenv';
import * as path from 'path';
import * as fs from 'fs';

// ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file .env
const envPath = path.resolve(process.cwd(), '.env');
console.log(`Loading .env from: ${envPath}`);
console.log(`File exists: ${fs.existsSync(envPath)}`);

// N·∫øu file t·ªìn t·∫°i, log n·ªôi dung c·ªßa file (c·∫©n th·∫≠n v·ªõi th√¥ng tin nh·∫°y c·∫£m)
if (fs.existsSync(envPath)) {
  console.log('File .env content:');
  const envContent = fs.readFileSync(envPath, 'utf8');
  // Ch·ªâ log m·ªôt ph·∫ßn c·ªßa file, kh√¥ng bao g·ªìm th√¥ng tin nh·∫°y c·∫£m nh∆∞ m·∫≠t kh·∫©u
  console.log(envContent.split('\n')
    .filter(line => !line.includes('PASSWORD') && !line.includes('SECRET'))
    .join('\n'));
}

// Load .env file manually before bootstrap
dotenv.config({ path: envPath });

// Load bi·∫øn m√¥i tr∆∞·ªùng tr·ª±c ti·∫øp
process.env.DB_USERNAME = process.env.DB_USERNAME || 'root';
process.env.DB_PASSWORD = process.env.DB_PASSWORD || '';
process.env.DB_HOST = process.env.DB_HOST || 'localhost';
process.env.DB_PORT = process.env.DB_PORT || '3306';
process.env.DB_NAME = process.env.DB_NAME || 'food_delivery';

async function bootstrap() {
  console.log('Environment variables after loading:');
  console.log(`DB_HOST: ${process.env.DB_HOST}`);
  console.log(`DB_PORT: ${process.env.DB_PORT}`);
  console.log(`DB_USERNAME: ${process.env.DB_USERNAME || 'not set'}`);
  console.log(`DB_PASSWORD: ${process.env.DB_PASSWORD ? '12345' : 'not set'}`);
  console.log(`DB_DATABASE: ${process.env.DB_DATABASE || 'not set'}`);
  console.log(`Current working directory: ${process.cwd()}`);

  const app = await NestFactory.create(AppModule);

  app.enableCors({
    origin: process.env.CORS_ORIGIN || '*',
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',
    allowedHeaders: 'Content-Type,Authorization,Accept',
    credentials: true,
  });

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      transform: true,
      forbidNonWhitelisted: true,
    }),
  );

  const config = new DocumentBuilder()
    .setTitle('Food Delivery API')
    .setDescription('API cho ·ª©ng d·ª•ng ƒë·∫∑t m√≥n ƒÉn')
    .setVersion('1.0')
    .addTag('Authentication', 'X√°c th·ª±c ng∆∞·ªùi d√πng')
    .addTag('Users', 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng')
    .addTag('Restaurants', 'Qu·∫£n l√Ω nh√† h√†ng')
    .addTag('Dishes', 'Qu·∫£n l√Ω m√≥n ƒÉn')
    .addTag('Orders', 'Qu·∫£n l√Ω ƒë∆°n h√†ng')
    .addBearerAuth()
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document);

  const port = process.env.PORT || 4000;
  await app.listen(port);
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${port}`);
  console.log(`üìö Swagger UI ƒëang ch·∫°y t·∫°i http://localhost:${port}/api`);
}
bootstrap();
